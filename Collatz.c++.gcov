        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:#include <cassert> 
        -:   19:int lazycache[100000]={0};
        -:   20:
        -:   21:using namespace std;
        -:   22:
        -:   23:// ------------
        -:   24:// collatz_read
        -:   25:// ------------
        -:   26:
function _Z12collatz_readRKSs called 8 returned 100% blocks executed 80%
        8:   27:pair<int, int> collatz_read (const string& s) {
        8:   28:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   29:    int i;
        -:   30:    int j;
        8:   31:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        8:   32:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   33:
        -:   34:// ------------
        -:   35:// collatz_eval
        -:   36:// ------------
        -:   37:
function _Z12collatz_evalii called 12 returned 100% blocks executed 84%
       12:   38:int collatz_eval (int i, int j) {
        -:   39:	int temp;
       12:   40:        int m=0;
        -:   41:
        -:   42:   
       12:   43:    if (i>j){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   44:        temp=i;
    #####:   45:        i=j;
    #####:   46:        j=temp;
        -:   47:    }
       12:   48:    assert(i>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       12:   49:    assert(j>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   50:
        -:   51:
      490:   52:    for(int a=i; a<=j; a++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   53:
      478:   54:        int c = 1;
        -:   55: 
      478:   56:        int n = a;
      478:   57: if((lazycache[n]!=0)){
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
      225:   58:	n=0;
        -:   59:        	}
    14255:   60:        while (n> 1) {
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -:   61:	   
    13299:   62:            if ((n % 2) == 0){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
     8937:   63:                n = (n / 2);
        -:   64:   
        -:   65:            }
        -:   66:            else{
     4362:   67:                n = (3 * n) + 1;
        -:   68:	        }
    13299:   69:            ++c;
        -:   70:	    }
      478:   71:        assert(c > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      478:   72:	if(lazycache[a]==0){
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
      253:   73:	lazycache[a]=c;
        -:   74:	}
      478:   75:        if(lazycache[a]>m){
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
       51:   76:            m=lazycache[a];
        -:   77:
        -:   78:        }
        -:   79:	   
        -:   80:    }
       12:   81:    return m;
        -:   82:}
        -:   83:
        -:   84:// -------------
        -:   85:// collatz_print
        -:   86:// -------------
        -:   87:
function _Z13collatz_printRSoiii called 7 returned 100% blocks executed 100%
        7:   88:void collatz_print (ostream& w, int i, int j, int v) {
        7:   89:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   90:
        -:   91:// -------------
        -:   92:// collatz_solve
        -:   93:// -------------
        -:   94:
function _Z13collatz_solveRSiRSo called 1 returned 100% blocks executed 80%
        1:   95:void collatz_solve (istream& r, ostream& w) {
        1:   96:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:   97:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
        4:   98:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   99:        const int            i = p.first;
        4:  100:        const int            j = p.second;
        4:  101:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I_lazycache called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        8:  102:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
