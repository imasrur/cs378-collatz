        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:#include <cassert> 
        -:   19://int lazycache[10000]={0};
        -:   20:
        -:   21:using namespace std;
        -:   22:
        -:   23:// ------------
        -:   24:// collatz_read
        -:   25:// ------------
        -:   26:
function _Z12collatz_readRKSs called 8 returned 100% blocks executed 80%
        8:   27:pair<int, int> collatz_read (const string& s) {
        8:   28:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   29:    int i;
        -:   30:    int j;
        8:   31:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        8:   32:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   33:
        -:   34:// ------------
        -:   35:// collatz_eval
        -:   36:// ------------
        -:   37:
function _Z12collatz_evalii called 13 returned 100% blocks executed 81%
       13:   38:int collatz_eval (int i, int j) {
        -:   39:	int temp;
       13:   40:    int m=0;
        -:   41:
        -:   42:   
       13:   43:    if (i>j){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   44:        temp=i;
    #####:   45:        i=j;
    #####:   46:        j=temp;
        -:   47:    }
       13:   48:    assert(i>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       13:   49:    assert(j>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   50:   // int s=1;
        -:   51:
      517:   52:    for(int a=i; a<=j; a++){
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -:   53:
      504:   54:        int c = 1;
        -:   55:        // s=1;
      504:   56:        int n = a;
    27352:   57:        while (n> 1) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   58:	      // if((c<10000)&&(lazycache[(unsigned)c]!=0)){
        -:   59:	         //  s=s+lazycache[(unsigned)c];
        -:   60:	        //   c=1;
        -:   61:        	//}
    26344:   62:            if ((n % 2) == 0){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
    17708:   63:                n = (n / 2);
        -:   64:		//          s++;
        -:   65:            }
        -:   66:            else{
     8636:   67:                n = (3 * n) + 1;
        -:   68:		//        s=s+2;
        -:   69:	        }
    26344:   70:            ++c;
        -:   71:	    }
      504:   72:        assert(c > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      504:   73:        if(c>m){
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
       57:   74:            m=c;
        -:   75:        }
        -:   76:	   //if (s<=10000 && i<10000){
        -:   77:	   //	lazycache[(unsigned)c]=s;
        -:   78:	   //}
        -:   79:    }
       13:   80:    return m;
        -:   81:}
        -:   82:
        -:   83:// -------------
        -:   84:// collatz_print
        -:   85:// -------------
        -:   86:
function _Z13collatz_printRSoiii called 7 returned 100% blocks executed 100%
        7:   87:void collatz_print (ostream& w, int i, int j, int v) {
        7:   88:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   89:
        -:   90:// -------------
        -:   91:// collatz_solve
        -:   92:// -------------
        -:   93:
function _Z13collatz_solveRSiRSo called 1 returned 100% blocks executed 80%
        1:   94:void collatz_solve (istream& r, ostream& w) {
        1:   95:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:   96:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
        4:   97:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   98:        const int            i = p.first;
        4:   99:        const int            j = p.second;
        4:  100:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        8:  101:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
